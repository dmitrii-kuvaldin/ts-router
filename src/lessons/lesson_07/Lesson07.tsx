export default function Lesson07() {
  // * –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ js –≤ ts:

  // 1. String
  // 2. Number
  // 3. Boolean
  // 4. Null
  // 5. Undefined
  // 6. Symbol
  // 7. BigInt

  // —Å–ª–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ ts:

  // 1. Object
  // 2. Array
  // 3. Function


  // * 1. –¢–∏–ø–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
  let user: string = 'Donald';
  user = 'Angela';


  // * 2. –¢–∏–ø–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª

  let importantNum: number = 42;
  importantNum = 8.5;

  // * 3. –¢–∏–ø–∏–∑–∞—Ü–∏—è –±—É–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

  // –ø—Ä–∏–º–µ—Ä union type –∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  let truth: boolean | 'truth' = true;
  truth = 'truth';

  // * 4. –¢–∏–ø–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞

  let fruits: string[] = ['apple', 'orange', 'lime'];
  fruits[0] = 'banana';
  fruits.push('pear');

  // * 5. –¢–∏–ø–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

  // –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç - —ç—Ç–æ —Ç–∏–ø void
  const sayHello = (): void => {
    console.log('hello!');
    // return 'hello'
  };


  // * 6. –¢–∏–ø–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º

  // —Ç–∏–ø–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–∫–æ–±–∫–∞—Ö
  // –æ—Ç–¥–µ–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

  const arrUser = (user: string, age: number): [string, number] => {
    return [user, age];
  };


  // * 7. —Ç–∏–ø–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ interface


  interface IUser {
    name: string;
    // –µ—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Ç–∏–ø–∞ ? - –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
    age?: number | string;
    role: string;
  }

  // –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ extends
  interface IFrontendDeveloper extends IUser {
    isFrontendDeveloper: true;
  }

  const userData: IFrontendDeveloper = {
    name: 'Denis',
    age: 40,
    role: 'admin',
    isFrontendDeveloper: true
  };

  // * 7. —Ç–∏–ø–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ type

  type Person = {
    name: string;
    age: number;
  };

  type Employee = Person & { role: string; };

  const driver: Employee = {
    name: 'Hank',
    age: 37,
    role: 'driver'
  };


  // * –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞
  // –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∞–º –∫–ª—é—á–µ–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É

  const { role, name, age } = userData;
  console.log(role, name, age);
  console.log(arrUser('peter', 30));

  sayHello();

  return (
    <>
      <h1>React TypeScript</h1>
      <p>String: {user}</p>
      <p>{importantNum}</p>
      <p>{truth}</p>
      {fruits.map((el, index) => (
        <p key={index}>{el}</p>
      ))}
      <p>User: {userData.name}</p>
      <p>{driver.name} is {driver.role} üöõ</p>
    </>
  );
}
